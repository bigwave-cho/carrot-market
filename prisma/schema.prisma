// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User{
 id         Int       @id @default(autoincrement())
 phone      String?   @unique
 email      String?    @unique
 name       String 
 avatar     String?
 createAt   DateTime  @default(now())
 updatedAt  DateTime  @updatedAt
 tokens     Token[]
 products   Product[]
 fav        Fav[]
 posts      Post[]
 answers Answer[]
 wonderings Wondering[]
}

model Token{
  id        Int        @id @default(autoincrement())
  payload   String     @unique
  createAt  DateTime   @default(now())
  updatedAt DateTime  @updatedAt
  user      User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    Int
  @@index([userId])
}

// 기본적 flow
// model -> db -> mutation -> data 가져오기 with SWR

model Product {
  id        Int        @id @default(autoincrement())
  createAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  image  String        @db.MediumText
  name   String 
  price  Int
  description String    @db.MediumText
  // 몇명이 fav에 추가했는지.
  favs   Fav[]
}

model Fav {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  product   Product      @relation(fields: [productId], references: [id], onDelete:Cascade)
  productId Int
  @@index([productId])
  createAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Post{
  id        Int        @id @default(autoincrement())
  createAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  //Post는 user에 의해 만들어짐.
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  // 퀘스쳔 필드를 가지고
  question  String @db.MediumText
  // 답변과 원더링 필드를 가짐.
  answers  Answer[]
  wonderings Wondering[]
}

model Answer{
  id        Int        @id @default(autoincrement())
  createAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  //answer는 유저에 의해 만들어지고
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  answer    String      @db.MediumText
  // Post에 속하기도 함.
  post      Post       @relation(fields: [postId], references: [id], onDelete:Cascade)
  postId    Int
  @@index([postId])
}

model Wondering {
  id        Int        @id @default(autoincrement())
  createAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  // Wonder도 유저에 의해 만들어지고
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  // 또한 post에도 속함.
  post      Post       @relation(fields: [postId], references: [id], onDelete:Cascade)
  postId    Int
  @@index([postId])

}
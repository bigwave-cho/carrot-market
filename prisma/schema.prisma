// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User{
 id         Int       @id @default(autoincrement())
 phone      String?   @unique
 email      String?    @unique
 name       String 
 avatar     String?
 createdAt   DateTime  @default(now())
 updatedAt  DateTime  @updatedAt
 tokens       Token[]
 products     Product[]
 fav           Fav[]
 posts         Post[]
 answers        Answer[]
 wonderings     Wondering[]
 writtenReviews  Review[]    @relation(name: "writtenReviews")
 receivedReviews Review[]    @relation(name: "receivedReviews")
 sale         Sale[]
 purchase     Purchase[]
 record       Record[]
 streams       Stream[]
 messages      Message[]

}

model Token{
  id        Int        @id @default(autoincrement())
  payload   String     @unique
  createdAt  DateTime   @default(now())
  updatedAt DateTime  @updatedAt
  user      User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    Int
  @@index([userId])
}

// 기본적 flow
// model -> db -> mutation -> data 가져오기 with SWR

model Product {
  id        Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  image  String        @db.MediumText
  name   String 
  price  Int
  description String    @db.MediumText
  favs   Fav[]
  sale         Sale[]
  purchase     Purchase[]
  record          Record[]
}



model Post{
  id        Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  question  String @db.MediumText
  // 위치 비허용 대비 옵셔널 필드로 생성
  latitude  Float?
  longitude Float?
  answers  Answer[]
  wonderings Wondering[]
}

model Answer{
  id        Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  answer    String      @db.MediumText
  post      Post       @relation(fields: [postId], references: [id], onDelete:Cascade)
  postId    Int
  @@index([postId])
}

model Wondering {
  id        Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  post      Post       @relation(fields: [postId], references: [id], onDelete:Cascade)
  postId    Int
  @@index([postId])

}

model Review {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  review       String   @db.MediumText
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  @@index([createdById])
  @@index([createdForId])
  // 이미 존재하는 db에 새 필드를 추가하니 db를 날릴거냐 기본값을 줄것이냐 선택지가 나옴
  // 디비를 날려도 되고 아닐 경우 Int? 로 옵셔널로 바꾸거나 아래처럼 디폴트값을 주면 됨.
  score       Int      @default(1)      
}

// Fav, Sale, Purchase는 같은 필드를 가지고 있다.
// enum을 사용하여 중복을 줄여보자.
model Fav {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  product   Product      @relation(fields: [productId], references: [id], onDelete:Cascade)
  productId Int
  @@index([productId])
  createdAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Sale {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  product   Product      @relation(fields: [productId], references: [id], onDelete:Cascade)
  productId Int
  @@index([productId])
  createdAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Purchase {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  product   Product      @relation(fields: [productId], references: [id], onDelete:Cascade)
  productId Int
  @@index([productId])
  createdAt  DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  kind      Kind
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}
enum Kind {
  Purchase
  Sale
  Fav
}

model Stream {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  description  String  @db.MediumText
  price    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  messages Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@index([userId])
  message  String  @db.MediumText
  stream      Stream     @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId    Int
  @@index([streamId])
}